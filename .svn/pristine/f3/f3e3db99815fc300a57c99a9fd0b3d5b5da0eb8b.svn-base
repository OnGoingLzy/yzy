<template>
	<view>
		
		<view style="	 position: absolute; top: 0;width: 100%;">
			<view class="search-container">
				<view class="search-input" >
				  <input type="text" class="search-text"  v-model="searchContent" placeholder="科室名"/>
				  <view style="height: 100%;width: 40px;text-align: center;" @click="this.searchContent=''">
					  <text class="voice-icon" style="    line-height: 30px;">×</text>
				  </view>
				  <view>
				  <button @click="search()" style="height: 30px; max-width: 20vw; border-radius: 30px; background-color: #409EFF; color: #fff; font-size: 14px;display: flex;justify-content: center;">
				    <text style="line-height: 30px;" >搜索</text>
				  </button>
				  </view>
				  
				</view>
			</view>
			
		</view>
		
		<view class="sort-view">
			<!-- 左边 -->
			<view >
				<scroll-view  scroll-y="true" class="sort-left">
					<view v-for="(item,index) in department" :key="index">
						<view class="sort-first" :class="{activesort : item.id == choiceFirst}" @click="sortFun(index,item.id)">
							<text v-text="item.departmentName" style="text-align: center;"></text>
						</view>
						
					</view>
				</scroll-view>
				
			</view>
			<!-- 右边 -->
			<view >
				<scroll-view  scroll-y="true" class="sort-right">
					<view v-for="(item1,index1) in departmentSubClass" :key="index1" @click="toChooseDoctor(item1)">
						<view class="sort-first"  >
							<text v-text="item1.subclassName" style="text-align: center;"></text>
						</view>	
						<view class="line" style="height: 1upx;background-color: #ccc;margin: 5px 5px 0 5px;"></view>
					</view>
				</scroll-view>
			</view>
		</view>
		
		
		
	</view>
</template>

<script>
	import request from '@/common/api/request.js'
	export default {
		data() {
			return {
				hospital:null,
				choiceFirst:0, //选择了哪个一级分类
				index:0,
				department:[],
				departmentSubClass:[],
				chooseDepartmentName:"",
				searchContent:"",
			}
		},
		onLoad: function (option) {
			//解析传过来的对象

			this.hospital = JSON.parse(decodeURIComponent(option.hospital));
			this.appointmentDate = JSON.parse(decodeURIComponent(option.date));
			
		},
		mounted() {
			this.getDepartment('','ALL')
		},
		methods: {
			search(){
				var searchContent = this.searchContent
				// 使用 findIndex 方法查找第一个匹配的 department 对象
				var matchingIndex = this.department.findIndex(function (department) {
				  return department.departmentName === searchContent;
				});
			
				// 如果找到匹配项
				if (matchingIndex !== -1) {
				  var matchingId = this.department[matchingIndex].id;
				  this.sortFun(matchingIndex,matchingId)
				} else {
				  console.log("未找到匹配项");
				}
			
				  
			},
			toChooseDoctor(departmentSubClass){
				departmentSubClass.departmentName = this.chooseDepartmentName
				console.log(departmentSubClass)
				uni.navigateTo({
					url:"/subPackage_appointment/choose_doctor/choose_doctor?hospital="+encodeURIComponent(JSON.stringify(this.hospital))+'&departmentSubClass='+encodeURIComponent(JSON.stringify(departmentSubClass))
				})
			},
			// 选中
			sortFun(index,id){
				this.index = index
				this.choiceFirst = id
				this.chooseDepartmentName = this.department[index]
				this.getDepartment(id,'son')
			},
			async getDepartment(id,queryType){
				const url = '/api/appointment/getDepartmentOrSubClass';
				const method = 'POST'; 
				const data = {
					id: id,
					hospitalId:this.hospital.id,
					queryType:queryType
				};
				try {
					const response = await request('yzy_app', url, method, data);
						//统一格式：{"data":{}, "flag":99, "result":"成功"}
					if(response.code == 99 ){
						if(!response.data.data){
							this.departmentSubClass = []
						}else{
							if(queryType=='ALL'){
								console.log(this.department);	
								this.department= response.data.data			
								this.department.sort((a, b) => b.weight - a.weight);
								if(this.choiceFirst==0) { //进入分类默认选择第一个分类并且查它的子类
									this.chooseDepartmentName = this.department[0].departmentName
									this.choiceFirst = this.department[0].id	
									this.getDepartment(this.choiceFirst,'son')
								}
							}else{		
								this.departmentSubClass = response.data.data
								this.departmentSubClass.sort((a, b) => b.weight - a.weight);
								console.log(this.departmentSubClass);	
							}
						}
						
						
					}
					else {
					}
				} catch (error) {
					console.log(error);
				}
			},
		}
	}
</script>

<style>
	.sort-first{
		/* height: 45px; */
		font-weight: bold; 
	}
	.first-category-box{
		 display: flex;
		 margin: 15px;
		 width: 100%;
		 height: 50px;
		 border-radius: 25px;  /* 增大圆角 */
		 font-size: 18px;
		 font-weight: bold;
		 background: #6991C7;  /* fallback for old browsers */
		 background: -webkit-linear-gradient(to right, #6991C7, #9DB8F2);  /* Chrome 10-25, Safari 5.1-6 修改渐变色 */
		 background: linear-gradient(to right, #6991C7, #9DB8F2); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ 修改渐变色 */
		 box-shadow: 0px 10px 15px rgba(0,0,0,0.1);  /* 添加阴影 */

		 align-items: center;
		 justify-content: center;

	}
	.search-container{
		 background: #ffffff;
		position: fixed;
		width: 98vw;
			display: flex;
			padding: 1vw;
		 justify-content: center;
		 background: #1296DB;
		 z-index: 100;
	 } 
	/* search input */
	.search-input {
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  background: #ffffff;
	  /* border: 1px solid #0045cf; */
	  border-radius: 24px;
	  padding: 2px 2px 2px 2vw;
	    width: 93vw;
	  height: 30px;	
	}
	.search-text {
	  flex: 1;
	  border: none;
	  outline: none;
	  font-size: 4vw;
	  color: #1a1a1a;
	}
	.sort-first {
		// position: relative;
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 5px 0;
		border-radius: 10px 0 0 10px;
		
	} 
	.icon-class{
		height: 10vw;
		width: 10vw;
	}
	.sort-view{
		display: flex;
		position: absolute;
		top:50px;
		z-index: 99;
	}
	.sort-left{
		width: 300rpx;
		background: #f8f8f8;
		height: 80vh;
		overflow-y: auto;
		left: 0;
		bottom: 0;
		padding-bottom: 100px;
	}
	.sort-right{flex: 1; margin-top: 0px;width: 450upx;background: white;height: 80vh;}
	.sort-name{
		height: 80upx;
		line-height: 80upx;
		font-size: 28upx;
		text-align: center;
	}
	.activesort{
		background: #FFFFFF;
		border-left: 4px #1296DB solid;
		color: #1296DB;
	}
	/* right */
	.sort-title{text-align: left !important;
	padding-left: 40upx;
	font-weight: bold;
	}
	.sort-flex{display: flex; flex-wrap: wrap; align-items: center;
	}
	.sort-flex image{
		width: 80upx; height: 100upx; display: block;
		}
	.sort-goods text{
		padding-top: 10upx;    max-width: 70%;
		text-overflow: ellipsis;
		overflow: hidden;
		white-space: nowrap;
	}
	.sort-goods{
		text-overflow: ellipsis;overflow: hidden;white-space: nowrap;
		font-size: 28upx;
		width: 33.333%;
		display: flex;
		flex-direction: column;
		align-items: center;
		padding-bottom: 40upx;
	}
	page{
		background: #f8f8f8;
	}
</style>
